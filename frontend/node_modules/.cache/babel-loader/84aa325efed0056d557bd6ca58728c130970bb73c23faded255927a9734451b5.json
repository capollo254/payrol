{"ast":null,"code":"// src/api/payroll.js\n\nimport api from './auth';\n\n/**\r\n * Helper function to get the authentication headers.\r\n * Ensures every request includes the Authorization token.\r\n */\nconst getAuthHeaders = () => {\n  const token = localStorage.getItem('token');\n  if (!token) {\n    throw new Error(\"No authentication token found. Please log in.\");\n  }\n  return {\n    headers: {\n      Authorization: `Token ${token}`\n    }\n  };\n};\n\n/**\r\n * Fetches the payslips for the logged-in user.\r\n * The backend should be configured to return only the payslips for the authenticated user.\r\n * @returns {Promise<Array>} A list of payslip objects.\r\n */\nexport const getPayslips = async () => {\n  try {\n    const response = await api.get('payroll/payslips/', getAuthHeaders());\n    // Handle paginated response - return just the results array\n    if (response.data && typeof response.data === 'object' && 'results' in response.data) {\n      return response.data.results;\n    }\n    // Fallback for non-paginated response\n    return Array.isArray(response.data) ? response.data : [];\n  } catch (error) {\n    console.error('Error fetching payslips:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Initiates a new payroll run by sending a POST request to the backend.\r\n * This is an admin-only action.\r\n * @param {object} runData - The data for the new payroll run (e.g., dates).\r\n * @returns {Promise<object>} The response data for the new payroll run.\r\n */\nexport const createPayrollRun = async runData => {\n  try {\n    const response = await api.post('payroll/payroll-runs/', runData, getAuthHeaders());\n    return response.data;\n  } catch (error) {\n    console.error('Error creating payroll run:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Fetches a list of all payroll runs.\r\n * This is typically an admin-only endpoint.\r\n * @returns {Promise<Array>} A list of payroll run objects.\r\n */\nexport const getPayrollRuns = async () => {\n  try {\n    const response = await api.get('payroll/payroll-runs/?page_size=100', getAuthHeaders());\n\n    // Handle paginated response\n    if (response.data && typeof response.data === 'object' && 'results' in response.data) {\n      let allRuns = response.data.results;\n\n      // If there are more pages, fetch them all\n      if (response.data.next) {\n        let nextUrl = response.data.next;\n        while (nextUrl) {\n          const nextResponse = await api.get(nextUrl.replace(api.defaults.baseURL, ''), getAuthHeaders());\n          allRuns = [...allRuns, ...nextResponse.data.results];\n          nextUrl = nextResponse.data.next;\n        }\n      }\n      return allRuns;\n    }\n\n    // Fallback for non-paginated response\n    return Array.isArray(response.data) ? response.data : [];\n  } catch (error) {\n    console.error('Error fetching payroll runs:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["api","getAuthHeaders","token","localStorage","getItem","Error","headers","Authorization","getPayslips","response","get","data","results","Array","isArray","error","console","createPayrollRun","runData","post","getPayrollRuns","allRuns","next","nextUrl","nextResponse","replace","defaults","baseURL"],"sources":["C:/Users/Code_AI/Documents/PAYROL SYSTEM COMPLEX/Backup Payrol Files-working/kenyan_payroll_system/frontend/src/api/payroll.js"],"sourcesContent":["// src/api/payroll.js\r\n\r\nimport api from './auth';\r\n\r\n/**\r\n * Helper function to get the authentication headers.\r\n * Ensures every request includes the Authorization token.\r\n */\r\nconst getAuthHeaders = () => {\r\n  const token = localStorage.getItem('token');\r\n  if (!token) {\r\n    throw new Error(\"No authentication token found. Please log in.\");\r\n  }\r\n  return {\r\n    headers: {\r\n      Authorization: `Token ${token}`,\r\n    },\r\n  };\r\n};\r\n\r\n/**\r\n * Fetches the payslips for the logged-in user.\r\n * The backend should be configured to return only the payslips for the authenticated user.\r\n * @returns {Promise<Array>} A list of payslip objects.\r\n */\r\nexport const getPayslips = async () => {\r\n  try {\r\n    const response = await api.get('payroll/payslips/', getAuthHeaders());\r\n    // Handle paginated response - return just the results array\r\n    if (response.data && typeof response.data === 'object' && 'results' in response.data) {\r\n      return response.data.results;\r\n    }\r\n    // Fallback for non-paginated response\r\n    return Array.isArray(response.data) ? response.data : [];\r\n  } catch (error) {\r\n    console.error('Error fetching payslips:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Initiates a new payroll run by sending a POST request to the backend.\r\n * This is an admin-only action.\r\n * @param {object} runData - The data for the new payroll run (e.g., dates).\r\n * @returns {Promise<object>} The response data for the new payroll run.\r\n */\r\nexport const createPayrollRun = async (runData) => {\r\n  try {\r\n    const response = await api.post('payroll/payroll-runs/', runData, getAuthHeaders());\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error creating payroll run:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Fetches a list of all payroll runs.\r\n * This is typically an admin-only endpoint.\r\n * @returns {Promise<Array>} A list of payroll run objects.\r\n */\r\nexport const getPayrollRuns = async () => {\r\n  try {\r\n    const response = await api.get('payroll/payroll-runs/?page_size=100', getAuthHeaders());\r\n    \r\n    // Handle paginated response\r\n    if (response.data && typeof response.data === 'object' && 'results' in response.data) {\r\n      let allRuns = response.data.results;\r\n      \r\n      // If there are more pages, fetch them all\r\n      if (response.data.next) {\r\n        let nextUrl = response.data.next;\r\n        while (nextUrl) {\r\n          const nextResponse = await api.get(nextUrl.replace(api.defaults.baseURL, ''), getAuthHeaders());\r\n          allRuns = [...allRuns, ...nextResponse.data.results];\r\n          nextUrl = nextResponse.data.next;\r\n        }\r\n      }\r\n      \r\n      return allRuns;\r\n    }\r\n    \r\n    // Fallback for non-paginated response\r\n    return Array.isArray(response.data) ? response.data : [];\r\n  } catch (error) {\r\n    console.error('Error fetching payroll runs:', error);\r\n    throw error;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}