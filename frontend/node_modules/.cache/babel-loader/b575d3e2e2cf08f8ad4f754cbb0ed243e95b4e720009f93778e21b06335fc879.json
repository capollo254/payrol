{"ast":null,"code":"// src/api/employees.js\n\nimport api from './auth';\n\n/**\r\n * A helper function to get the authentication headers.\r\n * This ensures that every request to a protected endpoint includes the user's token.\r\n * @returns {object} The headers object with the Authorization token.\r\n */\nconst getAuthHeaders = () => {\n  const token = localStorage.getItem('token');\n  if (!token) {\n    throw new Error(\"No authentication token found. Please log in.\");\n  }\n  return {\n    headers: {\n      Authorization: `Token ${token}`\n    }\n  };\n};\n\n/**\r\n * Fetches a list of all employees from the backend.\r\n * This is typically an admin-only endpoint.\r\n * @returns {Promise<Array>} A list of employee objects.\r\n */\nexport const getEmployees = async () => {\n  try {\n    const response = await api.get('employees/employees/', getAuthHeaders());\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching employees:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Fetches a single employee's details by their ID.\r\n * @param {number} employeeId - The ID of the employee to fetch.\r\n * @returns {Promise<object>} The employee object.\r\n */\nexport const getEmployee = async employeeId => {\n  try {\n    const response = await api.get(`employees/employees/${employeeId}/`, getAuthHeaders());\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching employee with ID ${employeeId}:`, error);\n    throw error;\n  }\n};\n\n/**\r\n * Creates a new employee by sending a POST request to the backend.\r\n * @param {object} employeeData - The data for the new employee.\r\n * @returns {Promise<object>} The newly created employee object.\r\n */\nexport const createEmployee = async employeeData => {\n  try {\n    const response = await api.post('employees/employees/', employeeData, getAuthHeaders());\n    return response.data;\n  } catch (error) {\n    console.error('Error creating new employee:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Updates an existing employee by their ID.\r\n * @param {number} employeeId - The ID of the employee to update.\r\n * @param {object} employeeData - The updated data for the employee.\r\n * @returns {Promise<object>} The updated employee object.\r\n */\nexport const updateEmployee = async (employeeId, employeeData) => {\n  try {\n    const response = await api.put(`employees/${employeeId}/`, employeeData, getAuthHeaders());\n    return response.data;\n  } catch (error) {\n    console.error(`Error updating employee with ID ${employeeId}:`, error);\n    throw error;\n  }\n};\n\n/**\r\n * Deletes an employee by their ID.\r\n * @param {number} employeeId - The ID of the employee to delete.\r\n * @returns {Promise<void>}\r\n */\nexport const deleteEmployee = async employeeId => {\n  try {\n    await api.delete(`employees/${employeeId}/`, getAuthHeaders());\n  } catch (error) {\n    console.error(`Error deleting employee with ID ${employeeId}:`, error);\n    throw error;\n  }\n};","map":{"version":3,"names":["api","getAuthHeaders","token","localStorage","getItem","Error","headers","Authorization","getEmployees","response","get","data","error","console","getEmployee","employeeId","createEmployee","employeeData","post","updateEmployee","put","deleteEmployee","delete"],"sources":["C:/Users/Code_AI/Documents/PAYROL SYSTEM COMPLEX/KE PAYROL SYSTEM/kenyan_payroll_system/frontend/src/api/employees.js"],"sourcesContent":["// src/api/employees.js\r\n\r\nimport api from './auth';\r\n\r\n/**\r\n * A helper function to get the authentication headers.\r\n * This ensures that every request to a protected endpoint includes the user's token.\r\n * @returns {object} The headers object with the Authorization token.\r\n */\r\nconst getAuthHeaders = () => {\r\n  const token = localStorage.getItem('token');\r\n  if (!token) {\r\n    throw new Error(\"No authentication token found. Please log in.\");\r\n  }\r\n  return {\r\n    headers: {\r\n      Authorization: `Token ${token}`,\r\n    },\r\n  };\r\n};\r\n\r\n/**\r\n * Fetches a list of all employees from the backend.\r\n * This is typically an admin-only endpoint.\r\n * @returns {Promise<Array>} A list of employee objects.\r\n */\r\nexport const getEmployees = async () => {\r\n  try {\r\n    const response = await api.get('employees/employees/', getAuthHeaders());\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching employees:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Fetches a single employee's details by their ID.\r\n * @param {number} employeeId - The ID of the employee to fetch.\r\n * @returns {Promise<object>} The employee object.\r\n */\r\nexport const getEmployee = async (employeeId) => {\r\n  try {\r\n    const response = await api.get(`employees/employees/${employeeId}/`, getAuthHeaders());\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Error fetching employee with ID ${employeeId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Creates a new employee by sending a POST request to the backend.\r\n * @param {object} employeeData - The data for the new employee.\r\n * @returns {Promise<object>} The newly created employee object.\r\n */\r\nexport const createEmployee = async (employeeData) => {\r\n  try {\r\n    const response = await api.post('employees/employees/', employeeData, getAuthHeaders());\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error creating new employee:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Updates an existing employee by their ID.\r\n * @param {number} employeeId - The ID of the employee to update.\r\n * @param {object} employeeData - The updated data for the employee.\r\n * @returns {Promise<object>} The updated employee object.\r\n */\r\nexport const updateEmployee = async (employeeId, employeeData) => {\r\n  try {\r\n    const response = await api.put(`employees/${employeeId}/`, employeeData, getAuthHeaders());\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Error updating employee with ID ${employeeId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Deletes an employee by their ID.\r\n * @param {number} employeeId - The ID of the employee to delete.\r\n * @returns {Promise<void>}\r\n */\r\nexport const deleteEmployee = async (employeeId) => {\r\n  try {\r\n    await api.delete(`employees/${employeeId}/`, getAuthHeaders());\r\n  } catch (error) {\r\n    console.error(`Error deleting employee with ID ${employeeId}:`, error);\r\n    throw error;\r\n  }\r\n};"],"mappings":"AAAA;;AAEA,OAAOA,GAAG,MAAM,QAAQ;;AAExB;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAC3B,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAI,CAACF,KAAK,EAAE;IACV,MAAM,IAAIG,KAAK,CAAC,+CAA+C,CAAC;EAClE;EACA,OAAO;IACLC,OAAO,EAAE;MACPC,aAAa,EAAE,SAASL,KAAK;IAC/B;EACF,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMM,YAAY,GAAG,MAAAA,CAAA,KAAY;EACtC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMT,GAAG,CAACU,GAAG,CAAC,sBAAsB,EAAET,cAAc,CAAC,CAAC,CAAC;IACxE,OAAOQ,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,WAAW,GAAG,MAAOC,UAAU,IAAK;EAC/C,IAAI;IACF,MAAMN,QAAQ,GAAG,MAAMT,GAAG,CAACU,GAAG,CAAC,uBAAuBK,UAAU,GAAG,EAAEd,cAAc,CAAC,CAAC,CAAC;IACtF,OAAOQ,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,mCAAmCG,UAAU,GAAG,EAAEH,KAAK,CAAC;IACtE,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMI,cAAc,GAAG,MAAOC,YAAY,IAAK;EACpD,IAAI;IACF,MAAMR,QAAQ,GAAG,MAAMT,GAAG,CAACkB,IAAI,CAAC,sBAAsB,EAAED,YAAY,EAAEhB,cAAc,CAAC,CAAC,CAAC;IACvF,OAAOQ,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMO,cAAc,GAAG,MAAAA,CAAOJ,UAAU,EAAEE,YAAY,KAAK;EAChE,IAAI;IACF,MAAMR,QAAQ,GAAG,MAAMT,GAAG,CAACoB,GAAG,CAAC,aAAaL,UAAU,GAAG,EAAEE,YAAY,EAAEhB,cAAc,CAAC,CAAC,CAAC;IAC1F,OAAOQ,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,mCAAmCG,UAAU,GAAG,EAAEH,KAAK,CAAC;IACtE,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMS,cAAc,GAAG,MAAON,UAAU,IAAK;EAClD,IAAI;IACF,MAAMf,GAAG,CAACsB,MAAM,CAAC,aAAaP,UAAU,GAAG,EAAEd,cAAc,CAAC,CAAC,CAAC;EAChE,CAAC,CAAC,OAAOW,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,mCAAmCG,UAAU,GAAG,EAAEH,KAAK,CAAC;IACtE,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}